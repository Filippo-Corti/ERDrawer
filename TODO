A. MODELING THE GRAPH LAYOUT:

☑ Count the number of crossings in the result
☑ Generate X Graphs and pick the one with the least amount of crossings to be shown
☐ Try to avoid the crossing, if possible, using a path finding algorithm
☑ Get to a point where the resulting graph looks like it could be a decent ER Diagram
☑ Build an import-export system

B. DRAW THE ER DIAGRAM

☑ Figure out what's a node and what's an edge
☑ Create an ER Diagram with only basic Entities and Relationships
☐ Implement Identifier (Internal and External)
☐ Implement Generalizations

C. IMPROVE LAYOUT CHOICE:

☐ Avoid relationship rhombuses to overlap
☐ Favor straight lines
☐ Favor symmetries

...

Alcuni problemi:
- Gli attributi dovrebbero diventare piccoli solo se ce ne è necessità. Dovrei verificare se la linea dell'attributo interseca con quella degli archi uscenti dal nodo.
- Ha senso concentrarsi momentanamente solo su archi singoli. Per gli archi multipli devo innanzitutto sistemare meglio il codice che li disegna e poi capire come sia meglio
 trovarne le traiettorie.
- Il meccanismo di scelta dei "connection Points" è poco pratico per trovare punti vicini ad altri, cosa utile sia per gli archi multipli che per gli identificatori composti/esterni.
- Devo imporre un limite rispetto ai delta per i connection point e un limite di dimensione per gli attributi.
- Dovrei fermarmi un attimo per implementare i punti C, perché sicuramente renderebbero meno deprimente il lavoro di disegno.
- Attualmente con ARCHI SINGOLI il risultato non è così male :)


Deve essere gestita in maniera più intelligente la questione dei connectionPoint. 
Sia Archi che Nodi possono avere connectionPoint. 
I ConnectionPoint collegano Nodi e Archi tra loro, ma sono anche condivisi dagli attributi.